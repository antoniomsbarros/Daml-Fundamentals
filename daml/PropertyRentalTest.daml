{-# LANGUAGE RebindableSyntax #-}
module PropertyRentalTest where

import Daml.Script
import PropertyRental
import DA.Date (date, Month(Jan, Dec))
import Prelude 
import DA.Optional

setup : Script (Party, Party, Party, Party)
setup = do
  owner <- allocateParty "Owner"
  tenant1 <- allocateParty "Tenant1"
  tenant2 <- allocateParty "Tenant2"
  observer <- allocateParty "Observer"
  return (owner, tenant1, tenant2, observer)

testPropertyListing : Script ()
testPropertyListing = script do
  (owner, _, _, observer1) <- setup
  -- Create Property Listing
  propertyListingCid <- submit owner do
    createCmd PropertyListing with
      property = Property with
        propertyId = "prop-001"
        address = "123 Main St"
        owner = owner
        status = Available
      observer1 = observer1

  -- Update Property Status
  _ <- submit owner do
    exerciseCmd propertyListingCid UpdateStatus with
      newStatus = Rented

  return ()

testRentalAgreement : Script ()
testRentalAgreement = script do
  (owner, tenant, _, _) <- setup
  -- Create Property
  let property = Property with
        propertyId = "prop-002"
        address = "456 Elm St"
        owner = owner
        status = Available

  -- Create Rental Agreement
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    createCmd RentalAgreementContract with
      rentalAgreement = RentalAgreement with
        agreementId = "agr-001"
        property = property
        tenant = tenant
        startDate = date 2024 Jan 01
        endDate = date 2024 Dec 31
        rent = 1000.0
        paymentStatus = Pending

  -- Start Rental
  _ <- submitMulti [owner, tenant] [] do
    exerciseCmd rentalAgreementCid StartRental with
      startDate = date 2024 Jan 01

  -- Make Payment
  _ <- submitMustFail tenant do
    exerciseCmd rentalAgreementCid MakePayment with
      amount = 1000.0

  return ()

testInvalidPropertyStatusUpdate : Script ()
testInvalidPropertyStatusUpdate = script do
  (owner, _, _, observer1) <- setup

  -- Create Property Listing with non-available status
  propertyListingCid <- submit owner do
    createCmd PropertyListing with
      property = Property with
        propertyId = "prop-004"
        address = "123 Main St"
        owner = owner
        status = Rented
      observer1 = observer1

  -- Attempt to update status (should fail)
  submitMustFail owner do
    exerciseCmd propertyListingCid UpdateStatus with
      newStatus = Maintenance

  return ()

testInvalidRentalStartDate : Script ()
testInvalidRentalStartDate = script do
  (owner, tenant, _, _) <- setup


  -- Create Property
  let property = Property with
        propertyId = "prop-005"
        address = "456 Elm St"
        owner = owner
        status = Available

  -- Create Rental Agreement
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    createCmd RentalAgreementContract with
      rentalAgreement = RentalAgreement with
        agreementId = "agr-003"
        property = property
        tenant = tenant
        startDate = date 2023 Dec 31  -- Past date
        endDate = date 2024 Dec 31
        rent = 1000.0
        paymentStatus = Pending

  -- Attempt to start rental (should fail)
  submitMustFail owner do
    exerciseCmd rentalAgreementCid StartRental with
      startDate = date 2023 Dec 31

  return ()

testEndRentalAgreement : Script ()
testEndRentalAgreement = script do
  (owner, tenant, _, _) <- setup


  -- Create Property
  let property = Property with
        propertyId = "prop-003"
        address = "789 Oak St"
        owner = owner
        status = Available

  -- Create Rental Agreement
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    createCmd RentalAgreementContract with
      rentalAgreement = RentalAgreement with
        agreementId = "agr-002"
        property = property
        tenant = tenant
        startDate = date 2024 Jan 01
        endDate = date 2024 Dec 31
        rent = 1000.0
        paymentStatus = Pending

  -- End Rental
  _ <- submitMustFail owner do
    exerciseCmd rentalAgreementCid EndRental with
      endDate = date 2024 Dec 31

  return ()

testInvalidPaymentAmount : Script ()
testInvalidPaymentAmount = script do
  (owner, tenant, _, _) <- setup
  -- Create Property
  let property = Property with
        propertyId = "prop-006"
        address = "789 Oak St"
        owner = owner
        status = Available

  -- Create Rental Agreement
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    createCmd RentalAgreementContract with
      rentalAgreement = RentalAgreement with
        agreementId = "agr-004"
        property = property
        tenant = tenant
        startDate = date 2024 Jan 01
        endDate = date 2024 Dec 31
        rent = 1000.0
        paymentStatus = Pending

  -- Attempt to make payment with incorrect amount (should fail)
  submitMustFail tenant do
    exerciseCmd rentalAgreementCid MakePayment with
      amount = 500.0

  return ()

testMakePaymentHappyPath : Script ()
testMakePaymentHappyPath = script do
  (owner, tenant,_, observer) <- setup

  -- Create Property
  let property = Property with
        propertyId = "prop-001"
        address = "123 Main St"
        owner = owner
        status = Available

  -- Create Rental Agreement
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    createCmd RentalAgreementContract with
      rentalAgreement = RentalAgreement with
        agreementId = "agr-001"
        property = property
        tenant = tenant
        startDate = date 2024 Jan 01
        endDate = date 2024 Dec 31
        rent = 1000.0
        paymentStatus = Pending

  -- Start Rental
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    exerciseCmd rentalAgreementCid StartRental with
      startDate = date 2024 Jan 01

-- Make Payment
  updatedRentalAgreementCid <- submit tenant do
    exerciseCmd rentalAgreementCid MakePayment with
      amount = 1000.0

  -- Fetch the updated rental agreement
  updatedRentalAgreement <- queryContractId @RentalAgreementContract tenant updatedRentalAgreementCid
  let fromSomeupdatedRentalAgreement = fromSome updatedRentalAgreement
  
  debug("message:"<> show  fromSomeupdatedRentalAgreement.rentalAgreement.paymentStatus)

  -- Assert that the payment status is now Completed
  assertMsg "Payment should be completed" ( fromSomeupdatedRentalAgreement.rentalAgreement.paymentStatus == Completed)

  return ()

testEndRentalHappyPath : Script ()
testEndRentalHappyPath = script do
  (owner, tenant,_, observer) <- setup

  -- Create Property
  let property = Property with
        propertyId = "prop-001"
        address = "123 Main St"
        owner = owner
        status = Available

  -- Create Rental Agreement
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    createCmd RentalAgreementContract with
      rentalAgreement = RentalAgreement with
        agreementId = "agr-001"
        property = property
        tenant = tenant
        startDate = date 2024 Jan 01
        endDate = date 2024 Dec 31
        rent = 1000.0
        paymentStatus = Pending

  -- Start Rental
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    exerciseCmd rentalAgreementCid StartRental with
      startDate = date 2024 Jan 01

-- Make Payment
  updatedRentalAgreementCid <- submit tenant do
    exerciseCmd rentalAgreementCid MakePayment with
      amount = 1000.0

  -- End Rental
  _ <- submitMulti [owner, tenant] [] do
    exerciseCmd updatedRentalAgreementCid EndRental with
     endDate = date 2024 Dec 31

  -- Check if the contract is archived using queryContractId
  queryResult <- queryContractId @RentalAgreementContract tenant updatedRentalAgreementCid
  let isArchived = case queryResult of
        None -> True
        Some _ -> False

  assertMsg "The contract should be archived" isArchived

  return ()

testEndRentalUnHappyPath : Script ()
testEndRentalUnHappyPath = script do
  (owner, tenant,_, observer) <- setup

  -- Create Property
  let property = Property with
        propertyId = "prop-001"
        address = "123 Main St"
        owner = owner
        status = Available

  -- Create Rental Agreement
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    createCmd RentalAgreementContract with
      rentalAgreement = RentalAgreement with
        agreementId = "agr-001"
        property = property
        tenant = tenant
        startDate = date 2024 Jan 01
        endDate = date 2024 Dec 31
        rent = 1000.0
        paymentStatus = Pending

  -- Start Rental
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    exerciseCmd rentalAgreementCid StartRental with
      startDate = date 2024 Jan 01

  -- End Rental
  _ <- submitMultiMustFail [owner, tenant] [] do
    exerciseCmd rentalAgreementCid EndRental with
     endDate = date 2024 Dec 31

  -- Check if the contract is archived using queryContractId
  queryResult <- queryContractId @RentalAgreementContract tenant rentalAgreementCid
  let isArchived = case queryResult of
        None -> True
        Some _ -> False
  assertMsg "The contract should be archived" (not isArchived)

  return ()

testHappyMaintenanceRequest : Script ()
testHappyMaintenanceRequest = script do
  (owner, tenant, _, _) <- setup

  -- Create Property
  let property = Property with
        propertyId = "prop-001"
        address = "123 Main St"
        owner = owner
        status = Rented

  -- Create Rental Agreement
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    createCmd RentalAgreementContract with
      rentalAgreement = RentalAgreement with
        agreementId = "agr-001"
        property = property
        tenant = tenant
        startDate = date 2024 Jan 01
        endDate = date 2024 Dec 31
        rent = 1000.0
        paymentStatus = Pending

  -- Request Maintenance
  updatedRentalAgreementCid <- submit tenant do
    exerciseCmd rentalAgreementCid MaintenanceRequest with
      request = "Fix the heating system"

  debug "Maintenance request submitted successfully."

  return ()

-- Unhappy Test: Failed Maintenance Request
testUnhappyMaintenanceRequest : Script ()
testUnhappyMaintenanceRequest = script do
  (owner, tenant, _, _) <- setup


  -- Create Property
  let property = Property with
        propertyId = "prop-002"
        address = "456 Elm St"
        owner = owner
        status = Available

  -- Create Rental Agreement
  rentalAgreementCid <- submitMulti [owner, tenant] [] do
    createCmd RentalAgreementContract with
      rentalAgreement = RentalAgreement with
        agreementId = "agr-002"
        property = property
        tenant = tenant
        startDate = date 2024 Jan 01
        endDate = date 2024 Dec 31
        rent = 1000.0
        paymentStatus = Pending

  -- Attempt to request maintenance (should fail)
  submitMustFail tenant do
    exerciseCmd rentalAgreementCid MaintenanceRequest with
      request = "Fix the heating system"

  debug "Maintenance request failed as expected."

  return ()

testFetchAllAgreementsForProperty : Script ()
testFetchAllAgreementsForProperty = script do
    (owner, tenant1, tenant2, observer1) <- setup

    -- Create a property
    let property = Property with
          propertyId = "property1"
          address = "123 Main St"
          owner = owner
          status = Available

    -- Create two rental agreements
    let rentalAgreement1 = RentalAgreement with
          agreementId = "agreement1"
          property = property
          tenant = tenant1
          startDate = date 2024 Jan 1
          endDate = date 2025 Jan 31
          rent = 1000.0
          paymentStatus = Pending

    let rentalAgreement2 = RentalAgreement with
          agreementId = "agreement2"
          property = property
          tenant = tenant2
          startDate = date 2024 Jan 1
          endDate = date 2025 Jan 31
          rent = 1200.0
          paymentStatus = Pending

    -- Create the rental agreement contracts
    rentalAgreementCid1 <- submitMulti [owner, tenant1] [] do
        createCmd RentalAgreementContract with rentalAgreement = rentalAgreement1
    rentalAgreementCid2 <- submitMulti [owner, tenant2] [] do
        createCmd RentalAgreementContract with rentalAgreement = rentalAgreement2

    -- Create the property listing contract
    propertyListingCid <- submit owner do
        createCmd PropertyListing with property = property, observer1 = observer1

    -- Fetch all rental agreements using FetchAllAgreementsForProperty choice
    fetchedAgreements <- submit owner do
        exerciseCmd propertyListingCid (FetchAllAgreementsForProperty with agreementIds = ["agreement1", "agreement2"])

    let countWithExistent = length fetchedAgreements
    assertMsg "Count of fetched agreements" (countWithExistent == 2) 
    debug ("The number of fetched agreements is: " <> show countWithExistent)

    return ()

testFetchAgreementByPropertyId :  Script ()
testFetchAgreementByPropertyId = script do
  -- Define test participants
    (owner, tenant, _, observer1) <- setup

    -- Create a property
    let property = Property with
          propertyId = "property1"
          address = "123 Main St"
          owner = owner
          status = Available

    -- Create a rental agreement
    let rentalAgreement = RentalAgreement with
          agreementId = "agreement1"
          property = property
          tenant = tenant
          startDate = date 2024 Jan 1
          endDate = date 2025 Jan 31
          rent = 1000.0
          paymentStatus = Pending

    -- Create the rental agreement contract
    rentalAgreementCid <- submitMulti [owner, tenant] [] do
        createCmd RentalAgreementContract with rentalAgreement = rentalAgreement

    -- Create the property listing contract
    propertyListingCid <- submitMulti [owner, tenant] [] do
        createCmd PropertyListing with property = property, observer1 = observer1

    -- Fetch the rental agreement using FetchAgreementByPropertyId choice
    fetchedAgreement <- submit owner do
        exerciseCmd propertyListingCid (FetchAgreementByPropertyId with agreementId = "agreement1")

    -- Check the fetched agreement
    case fetchedAgreement of
      Left err -> assert False
      Right agreement -> assert (agreement == rentalAgreement)

    -- Try to fetch a non-existent agreement
    nonExistentAgreement <- submit owner do
        exerciseCmd propertyListingCid (FetchAgreementByPropertyId with agreementId = "non-existent-agreement")

    -- Check that the result is Left with the correct error message
    case nonExistentAgreement of
      Left err -> assert (err == "Agreement not found.")
      Right _ -> assert False





